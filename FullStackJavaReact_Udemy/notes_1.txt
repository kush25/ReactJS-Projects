1) To check nodejs version
node --version
node -v
2) npm version
npm -version

3) To start react App
npx create-react-app "appname"

4) After creating
cd "appname"

5) To start applications 
npm start

React Dom is for Web Applications
React Native is for Mobile Apps
react-dom helps us to run the react folder and view in browser
react-scripts: all cmd npm start command is managed.

node-module is similar to target folder in maven where all the jars are present.

There are two kinds of components inreact: functions,Class

In latest react, App.js is no longer created as Class but it is created as Function Component

Package.json is similar to pom.xml in maven

Components basically helps us in dividing our page.
We can have header,mainpage,footer, menu component. So, it becomes more reusable and easy.
HTML in JavaScript file is JSX.

Each component has its own View,CSS,Logic(alert button, onclick()) , State, Props

Always when we create a class component we need to extend it with the class name and call a render() method.

Then include the class name as an HTML tag in App component

For example you created a class compo as:
class Kushcomponent extends Component{
render(){

return(

); } } 


then we need to declare this in 
App Component as
<Kushcomponenet/>
or 
<Kushcomponenet></Kushcomponenet/>

For Function component:
function KushComponenet(){
return (

);

}


Babel helps us in wiritng latest JS versions and then it compiles it automatically to older versions if required as per browser.
It also converts JSX to JS.


Most Imp
Componenets first letter must be capital
kushcomp => error
KushCompo => Perfect

when we write return(  ...); , so do we need paranthesis or not? Basically it can work with out that, but the <div> or any element must start on the same line.So as our code looks more formatted we use ().

For example

This is Not Valid
class MySecondComponent extends Component {
  render() {
    return 
    <div className="mySecondCompo">
            MySecondComponent
      </div>
  
  }
}


This is Valid
class MySecondComponent extends Component {
  render() {
    return <div className="mySecondCompo">
            MySecondComponent
      </div>
  
  }
} 


Ok, so now when we create a custom component in a new folder, we need to import that in App.js as
import FirstCompo from './components/...../FirstCompo'

and then we need to write 
export default class FirstCompo ..... in the .js file that we created in components.



Ok so now important concept is when we import react and component from react we write
import React, {Componenet} from 'react'

why the {Componenet} is in this and not react in it.

So, it is like both React and Component are in  same file 'react', but React is the main parent in it and has export default... so it is normally written, but here where component comes after that and it is only export not export default so it is to be written in  {}.

instead of writing export default FirstCompo

do...

function Firstcompo(){

}

export default Firstcompo;
